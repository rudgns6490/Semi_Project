/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.47
 * Generated at: 2019-12-19 08:56:07 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.myshop;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class location_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../header.jsp", out, false);
      out.write("\r\n");
      out.write("  \t<style>\r\n");
      out.write("  \t\tdiv.mycontent {\r\n");
      out.write("  \t\t\tfont-size: 9pt;\r\n");
      out.write("  \t\t\tfont-weight: bold;\r\n");
      out.write("  \t\t\tcolor: navy;\r\n");
      out.write("  \t\t}\r\n");
      out.write("  \t</style>\r\n");
      out.write("  \r\n");
      out.write("\t<div id=\"map\" style=\"width:90%; height:450px;\"></div>\r\n");
      out.write("\t\r\n");
      out.write("\t<script type=\"text/javascript\" src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=발급받은 APP KEY를 넣으시면 됩니다.\"></script>\r\n");
      out.write("\t<script type=\"text/javascript\" src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=f42c6cbd2d2060c5c719ee80540fbfbc\"></script>\r\n");
      out.write("\t\r\n");
      out.write("\t<script>\r\n");
      out.write("\t$(document).ready(function(){\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 마커를 표시할 위치와 내용을 가지고 있는 객체 배열 \r\n");
      out.write("\t\tvar positionArr = [\r\n");
      out.write("\t\t    {\r\n");
      out.write("\t\t        content: \"<div class='mycontent'>롯데백화점본점</div>\", \r\n");
      out.write("\t\t        latlng: new kakao.maps.LatLng(37.56511284953554, 126.98187860455485)\r\n");
      out.write("\t\t    },\r\n");
      out.write("\t\t    {\r\n");
      out.write("\t\t        content: \"<div class='mycontent'>스타즈호텔</div>\", \r\n");
      out.write("\t\t        latlng: new kakao.maps.LatLng(37.56253702140974, 126.99066231320411)\r\n");
      out.write("\t\t    },\r\n");
      out.write("\t\t    {\r\n");
      out.write("\t\t        content: \"<div class='mycontent'>솔라리아호텔</div>\", \r\n");
      out.write("\t\t        latlng: new kakao.maps.LatLng(37.56266260624476, 126.9852294524821)\r\n");
      out.write("\t\t    },\r\n");
      out.write("\t\t    {\r\n");
      out.write("\t\t        content: \"<div class='mycontent'>선샤인빌딩</div>\",\r\n");
      out.write("\t\t        latlng: new kakao.maps.LatLng(37.56186539471529, 126.98666137564815)\r\n");
      out.write("\t\t    }\r\n");
      out.write("\t\t];\r\n");
      out.write("\t\r\n");
      out.write("\t\t//지도를 담을 영역의 DOM 레퍼런스\r\n");
      out.write("\t\tvar mapContainer = document.getElementById('map'); \r\n");
      out.write("\t\t\r\n");
      out.write("\t\t//지도를 생성할 때 필요한 기본 옵션\r\n");
      out.write("\t\tvar options = { \r\n");
      out.write("\t\t\tcenter: new kakao.maps.LatLng(37.56800299296494, 126.98322489339314), // 지도의 중심좌표. 반드시 존재해야함.\r\n");
      out.write("\t\t\tlevel: 4 //지도의 레벨(확대, 축소 정도)\r\n");
      out.write("\t\t};\r\n");
      out.write("\t\t/*\r\n");
      out.write("\t\t  center 에 할당할 값은 kakao.maps.LatLng 클래스를 사용하여 생성한다.\r\n");
      out.write("\t\t  kakao.maps.LatLng 클래스의 2개 인자값은 첫번째 파라미터는 위도(latitude)이고, 두번째 파라미터는 경도(longitude)이다.\r\n");
      out.write("\t\t*/\r\n");
      out.write("\r\n");
      out.write("\t\t//지도 생성 및 생성된 지도객체 리턴\r\n");
      out.write("\t\tvar mapobj = new kakao.maps.Map(mapContainer, options);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 일반 지도와 스카이뷰로 지도 타입을 전환할 수 있는 지도타입 컨트롤을 생성함. \t\r\n");
      out.write("\t\tvar mapTypeControl = new kakao.maps.MapTypeControl();\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 지도 타입 컨트롤을 지도에 표시함.\r\n");
      out.write("\t\t// kakao.maps.ControlPosition은 컨트롤이 표시될 위치를 정의하는데 TOPRIGHT는 오른쪽 위를 의미함.\t\r\n");
      out.write("\t\tmapobj.addControl(mapTypeControl, kakao.maps.ControlPosition.TOPRIGHT);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 지도 확대 축소를 제어할 수 있는  줌 컨트롤을 생성함.\t\r\n");
      out.write("\t\tvar zoomControl = new kakao.maps.ZoomControl();\r\n");
      out.write("\t\tmapobj.addControl(zoomControl, kakao.maps.ControlPosition.RIGHT);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar latitude = 0.0;   // 위도를 담아둘 변수\r\n");
      out.write("\t\tvar longitude = 0.0;  // 경도를 담아둘 변수 \r\n");
      out.write("\t\t\t\t\t \r\n");
      out.write("\t\tif (navigator.geolocation) {\r\n");
      out.write("\t\t\t// HTML5의 geolocation으로 사용할 수 있는지 확인한다 \r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t// GeoLocation을 이용해서 웹페이지에 접속한 사용자의 현재 위치를 확인하여 그 위치(위도,경도)를 지도의 중앙에 오도록 한다. \r\n");
      out.write("\t\t\tnavigator.geolocation.getCurrentPosition(function(position) {\r\n");
      out.write("\t\t\t\tlatitude = position.coords.latitude;   // 현위치의 위도\r\n");
      out.write("\t\t\t\tlongitude = position.coords.longitude; // 현위치의 경도\r\n");
      out.write("\t\t\t//\tconsole.log(\"현위치의 위도: \"+latitude+\", 현위치의 경도: \"+longitude); \r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t// 마커가 표시될 위치를 geolocation으로 얻어온 좌표로 생성한다   \r\n");
      out.write("\t\t\t\tvar locPosition = new kakao.maps.LatLng(latitude, longitude);  \r\n");
      out.write("\t\t\t\t    \r\n");
      out.write("\t\t\t\t// 인포윈도우(텍스트를 올릴 수 있는 말풍선 모양의 이미지)에 표시될 내용      \r\n");
      out.write("\t\t\t\tvar message = '<div style=\"padding:5px; font-size:9pt;\">여기에 계신가요?</div>'; \r\n");
      out.write("\t\t             \r\n");
      out.write("\t\t\t\t// 마커이미지를 기본이미지를 사용하지 않고 \r\n");
      out.write("\t\t\t\t// 다른 이미지로 사용할 경우의 이미지 주소 \r\n");
      out.write("\t\t        var imageSrc = 'http://localhost:9090/MyMVC/images/pointerPink.png';       \r\n");
      out.write("\t\t        \r\n");
      out.write("\t\t        // 마커이미지의 크기 \r\n");
      out.write("\t\t\t    var imageSize = new kakao.maps.Size(34, 39);   \r\n");
      out.write("\t\t\t      \r\n");
      out.write("\t\t\t    // 마커이미지의 옵션. 마커의 좌표와 일치시킬 이미지 안에서의 좌표를 설정한다. \r\n");
      out.write("\t\t\t    var imageOption = {offset: new kakao.maps.Point(15, 39)};   \r\n");
      out.write("\t\t          \r\n");
      out.write("\t\t\t    // 마커의 이미지정보를 가지고 있는 마커이미지를 생성한다. \r\n");
      out.write("\t\t\t    var markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imageOption);\r\n");
      out.write("    \r\n");
      out.write("\t\t        // == 마커와 인포윈도우를 표시할 함수를 호출한다. == //\r\n");
      out.write("\t\t        displayMarker(mapobj, locPosition, message, markerImage);\r\n");
      out.write("\t\t     \r\n");
      out.write("\t\t        // 지도의 센터위치를 사이트에 접속한 클라이언트 컴퓨터의 현재의 위.경도로 변경한다.\r\n");
      out.write("\t\t\t    mapobj.setCenter(locPosition);\r\n");
      out.write("\t\t        \r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t} \r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\telse {\r\n");
      out.write("\t\t\t// HTML5의 GeoLocation을 사용할 수 없을때 마커 표시 위치와 인포윈도우 내용을 설정한다.\r\n");
      out.write("\t\t\tvar locPosition = new kakao.maps.LatLng(37.56800299296494, 126.98322489339314);     \r\n");
      out.write("\t        var message = 'geolocation을 사용할수 없습니다.';\r\n");
      out.write("\t        \r\n");
      out.write("\t        displayMarker(mapobj, locPosition, message);\r\n");
      out.write("\t        \r\n");
      out.write("\t     // 지도의 센터위치를 위에서 정적으로 입력한 위.경도로 변경한다.\r\n");
      out.write("\t\t    mapobj.setCenter(locPosition);\r\n");
      out.write("\t\t}// end of if~else---------------------\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t    // === 객체 배열 만큼 마커 및 인포윈도우를 생성하여 지도위에 표시한다 === //  \r\n");
      out.write("\t\tfor(var i=0; i<positionArr.length; i++) {\r\n");
      out.write("\t\t    displayMarker(mapobj, positionArr[i].latlng, positionArr[i].content);\r\n");
      out.write("        }// end of for--------------------\r\n");
      out.write("            \r\n");
      out.write("        \r\n");
      out.write("\t\t// ===== 지도에 클릭 이벤트를 등록하기 ======\r\n");
      out.write("\t\t// 지도를 클릭하면 클릭한 위치에 마커를 표시하면서 위,경도를 보여주도록 한다.\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// == 마커 생성하기 == //\r\n");
      out.write("\t\t// 1. 마커이미지 변경\r\n");
      out.write("\t\tvar imageSrc = 'http://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_red.png';       \r\n");
      out.write("\t\t        \r\n");
      out.write("\t\t// 2. 마커이미지의 크기 \r\n");
      out.write("\t    var imageSize = new kakao.maps.Size(34, 39);   \r\n");
      out.write("\t\t\t      \r\n");
      out.write("\t    // 3. 마커이미지의 옵션. 마커의 좌표와 일치시킬 이미지 안에서의 좌표를 설정한다. \r\n");
      out.write("\t    var imageOption = {offset: new kakao.maps.Point(15, 39)};   \r\n");
      out.write("          \r\n");
      out.write("\t    // 4. 이미지정보를 가지고 있는 마커이미지를 생성한다. \r\n");
      out.write("\t    var markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imageOption);\r\n");
      out.write("\t\t\t    \r\n");
      out.write("\t    var movingMarker = new kakao.maps.Marker({ \r\n");
      out.write("\t\t\tmap: mapobj, \r\n");
      out.write("\t        image: markerImage  // 마커이미지 설정\r\n");
      out.write("\t\t});\r\n");
      out.write("        \r\n");
      out.write("\t    \r\n");
      out.write("\t\tkakao.maps.event.addListener(mapobj, 'click', function(mouseEvent) {         \r\n");
      out.write("\t\t\t    \r\n");
      out.write("\t\t\t // 클릭한 위도, 경도 정보를 가져옵니다 \r\n");
      out.write("\t\t\t var latlng = mouseEvent.latLng;\r\n");
      out.write("\t\t\t \r\n");
      out.write("\t\t\t movingMarker.setPosition(latlng);\r\n");
      out.write("\t\t\t // 마커 위치를 클릭한 위치로 옮긴다.\r\n");
      out.write("\t\t\t    \r\n");
      out.write("\t\t\t var htmlMessage = '클릭한 위치의 위도는 ' + latlng.getLat() + ' 이고, '; \r\n");
      out.write("\t\t\t     htmlMessage += '경도는 ' + latlng.getLng() + ' 입니다';\r\n");
      out.write("\t\t\t    \r\n");
      out.write("\t\t\t var resultDiv = document.getElementById(\"result\"); \r\n");
      out.write("\t\t\t resultDiv.innerHTML = htmlMessage;\r\n");
      out.write("\t\t}); \r\n");
      out.write("        \r\n");
      out.write("\t}); // end of $(document).ready()-------------------\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t            \r\n");
      out.write("\t// == 지도에 마커와 인포윈도우(텍스트를 올릴 수 있는 말풍선 모양의 이미지)를 생성하여 표시하는 함수 ==  \r\n");
      out.write("\tfunction displayMarker(mapobj, locPosition, message, markerImage) {\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// == 마커 생성하기 == //\r\n");
      out.write("\t\tvar marker = null;\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tif(markerImage != null) { \r\n");
      out.write("\t\t   // 마커이미지가 있는 경우  \r\n");
      out.write("\t\t   marker = new kakao.maps.Marker({ \r\n");
      out.write("\t\t\t\t\tmap: mapobj, \r\n");
      out.write("\t\t\t        position: locPosition, // locPosition 좌표에 마커를 생성 \r\n");
      out.write("\t\t\t        image: markerImage     // 마커이미지 설정\r\n");
      out.write("\t\t\t\t}); \r\n");
      out.write("\t\t}\r\n");
      out.write("\t\telse {\r\n");
      out.write("\t\t\t// 마커이미지가 없는 경우  \r\n");
      out.write("\t\t\tmarker = new kakao.maps.Marker({ \r\n");
      out.write("\t\t\t\tmap: mapobj, \r\n");
      out.write("\t\t        position: locPosition // locPosition 좌표에 마커를 생성 \r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\tmarker.setMap(mapobj); // 지도에 마커를 표시한다\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// === 인포윈도우(텍스트를 올릴 수 있는 말풍선 모양의 이미지) 생성하기 ===   \r\n");
      out.write("\t//\tvar iwContent = \"<div style='padding:5px; font-size:9pt;'>현위치(약간틀림)<br/><a href='' style='color:blue;'>매장보기</a> <a href='https://map.kakao.com/link/map/현위치(약간틀림),\"+latitude+\",\"+longitude+\"' style='color:blue;' target='_blank'>큰지도</a> <a href='https://map.kakao.com/link/to/현위치(약간틀림),\"+latitude+\",\"+longitude+\"' style='color:blue' target='_blank'>길찾기</a></div>\";\r\n");
      out.write("        var iwContent = message;\t\r\n");
      out.write("\t\t// 인포윈도우에 표출될 내용으로 HTML 문자열이나 document element가 가능함.\r\n");
      out.write("\t\t\r\n");
      out.write("\t    var iwPosition = locPosition;\r\n");
      out.write("\t\t// 인포윈도우 표시 위치\r\n");
      out.write("\t\t\r\n");
      out.write("\t    var iwRemoveable = true; \r\n");
      out.write("\t\t// removeable 속성을 ture 로 설정하면 인포윈도우를 닫을 수 있는 x버튼이 표시됨\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// == 인포윈도우를 생성하기 == \r\n");
      out.write("\t\tvar infowindow = new kakao.maps.InfoWindow({\r\n");
      out.write("\t\t    position : iwPosition, \r\n");
      out.write("\t\t    content : iwContent,\r\n");
      out.write("\t\t    removable : iwRemoveable\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\r\n");
      out.write("\t\t// == 지도 위에 인포윈도우 표시하기 == //\r\n");
      out.write("           // infowindow.open(map);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// == 마커 위에 인포윈도우를 표시하기 == //\r\n");
      out.write("\t\t// infowindow.open(map, marker);\r\n");
      out.write("\t\t\r\n");
      out.write("\t    // == 마커위에 마우스 커서를 올리면 마커 위에 인포윈도우를 표시하기 == //\r\n");
      out.write("\t\t// 마커에 마우스오버 이벤트를 등록한다. \r\n");
      out.write("\t\t/* kakao.maps.event.addListener(marker, 'mouseover', function() {\r\n");
      out.write("\t\t      infowindow.open(mapobj, marker);  \r\n");
      out.write("\t\t}); */ \r\n");
      out.write("\t    \r\n");
      out.write("\t\t// 마커에 마우스아웃 이벤트를 등록한다. \r\n");
      out.write("\t\t/* kakao.maps.event.addListener(marker, 'mouseout', function() {\r\n");
      out.write("\t\t      infowindow.close();  \r\n");
      out.write("\t\t}); */\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t kakao.maps.event.addListener(marker, 'hover', \r\n");
      out.write("\t\t\t\t function() {\r\n");
      out.write("\t\t\t \t\tinfowindow.open(mapobj, marker); \r\n");
      out.write("\t\t \t\t },\r\n");
      out.write("\t\t \t\t function() {\r\n");
      out.write("\t\t         \tinfowindow.close();  \r\n");
      out.write("\t\t\t \t }\r\n");
      out.write("\t\t ); \r\n");
      out.write("\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t    \r\n");
      out.write("    }// end of function displayMarker(mapobj, locPosition, message)------------------\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t</script>    \r\n");
      out.write("    \r\n");
      out.write("    <div id=\"result\" style=\"margin: 20px 0;\"></div>\r\n");
      out.write("    \r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../footer.jsp", out, false);
      out.write("\r\n");
      out.write("    ");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
