package myshop.controller;

import java.util.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import common.controller.AbstractController;
import member.model.MemberVO;
import my.util.MyUtil;
import myshop.model.*;

public class CartListAction extends AbstractController {

	@Override
	public void execute(HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		// 카테고리 목록을 조회해오기 
		super.getCategoryList(request);
		
		// 장바구니 보기는 반드시 해당사용자가 로그인을 해야만 볼 수 있다.
		boolean isLogIn = super.checkLogin(request);
		
		if(!isLogIn) {
			request.setAttribute("message", "장바구니를 보려면 먼저 로그인 부터 하세요!!");
			request.setAttribute("loc", "javascript:history.back()"); 
			
		//	super.setRedirect(false);
			super.setViewPage("/WEB-INF/msg.jsp");
			return;
		}
		else {
			// *** 페이징 처리한 장바구니 목록 보여주기 *** //
			InterProductDAO pdao = new ProductDAO();
			
			// 1. 페이징 처리를 위해 1페이지당 보여줄 장바구니에 들어간 제품의 갯수를 몇개로 할 것인가를 정한다.
			//    한 페이지당 보여줄 장바구니에 들어간 제품의 갯수는 3개로 한다.
			int sizePerPage = 3;
			
			// 2. 페이징 처리한 데이터 조회 결과물 가져오기 
			//    -- 전체 페이지 갯수 알아오기
			int totalPage = 0;
			
			//    -- 장바구니에 들어있는 제품의 총갯수 구하기
			HttpSession session = request.getSession();
			
			String userid = ((MemberVO) session.getAttribute("loginuser")).getUserid(); 
			int totalCountCart = pdao.getTotalCountCart(userid);
			
			totalPage = (int) Math.ceil( (double)totalCountCart/sizePerPage );
					 //                       20.0/3 = 6.666666666666667‬ ==> 7.0  ==> 7
			         //                       21.0/3 = 7.0 ==> 7.0 ==> 7 
			
		//	System.out.println("~~~ 확인용 totalPage : " + totalPage);
			
			
			//   -- 조회하고자 하는 페이지번호를 받아와야 한다.
			String str_currentShowPageNo = request.getParameter("currentShowPageNo"); 
			
			int currentShowPageNo = 0;
			
			try {
				  if(str_currentShowPageNo == null) {
					  currentShowPageNo = 1; 
				  }
				  else {
					  currentShowPageNo = Integer.parseInt(str_currentShowPageNo);
					  
					  if(currentShowPageNo < 1 || currentShowPageNo > totalPage) {
						  currentShowPageNo = 1;
					  }
				  }
				  
			} catch (NumberFormatException e) {
				  currentShowPageNo = 1;
			}
			
			//  -- 로그인 되어진 사용자의 페이징 처리한 장바구니 데이터조회 결과물 가져오기
			List<CartVO> cartList = pdao.getProductCart(userid, currentShowPageNo, sizePerPage);
		
		/*	
			for(CartVO cvo : cartList) {
				System.out.println("1.제품명:"+cvo.getItem().getPname() +" 2.판매가:"+cvo.getItem().getSaleprice()+" 3.주문량:"+cvo.getOqty()+" 4.총구매액: "+cvo.getItem().getTotalPrice()); 
			}
		*/	
			
			//  -- 페이지바 만들기 
			String url = "cartList.up";
			int blockSize = 5;
		//  blockSize 는 1개 블럭(토막)당 보여지는 페이지번호의 갯수이다.
			
		//        1 2 3 4 5 [다음]    -- 1개 블럭
		//  [이전] 6 7 8 9 10 [다음]   -- 1개 블럭
		//  [이전] 11 12              -- 1개 블럭 
			
			int loop = 1;
			// loop 는 1부터 증가하여 1개 블럭을 이루는 페이지번호의 갯수(위의 설명상 지금은 5(==blockSize)까지만 증가하는 용도이다.
			
			int pageNo = ((currentShowPageNo - 1)/blockSize) * blockSize + 1; 
			// *** !! 공식이다. !! *** // 
			/*
			    1  2  3  4  5   -- 첫번째 블럭의 페이지번호 시작값(pageNo)은 1 이다. 
			    6  7  8  9  10  -- 두번째 블럭의 페이지번호 시작값(pageNo)은 6 이다.
			    11 12           -- 세번째 블럭의 페이지번호 시작값(pageNo)은 11 이다. 
			
			    currentShowPageNo    pageNo
			    ---------------------------
			          1           ((1 - 1)/5) * 5 + 1 ==> 1
			          2           ((2 - 1)/5) * 5 + 1 ==> 1
			          3           ((3 - 1)/5) * 5 + 1 ==> 1 
			          4           ((4 - 1)/5) * 5 + 1 ==> 1
			          5           ((5 - 1)/5) * 5 + 1 ==> 1
			          
			          6           ((6 - 1)/5) * 5 + 1 ==> 6 
			          7           ((7 - 1)/5) * 5 + 1 ==> 6 
			          8           ((8 - 1)/5) * 5 + 1 ==> 6
			          9           ((9 - 1)/5) * 5 + 1 ==> 6
			          10          ((10 - 1)/5) * 5 + 1 ==> 6
			          
			          11          ((11 - 1)/5) * 5 + 1 ==> 11  
			          12          ((12 - 1)/5) * 5 + 1 ==> 11
			 */
			String pageBar = "";
			
			// *** [이전] 만들기 *** // 
			if(pageNo != 1) {
				pageBar += "&nbsp;<a href='"+url+"?currentShowPageNo="+(pageNo-1)+"'>[이전]</a>&nbsp;";
			}
			
			while( !(loop > blockSize || pageNo > totalPage) ) {
				
				if(pageNo == currentShowPageNo) {
					pageBar += "&nbsp;<span style='color:red; border:solid 1px gray; padding: 2px 4px;'>"+pageNo+"</span>&nbsp;";
				}
				else {
					pageBar += "&nbsp;<a href='"+url+"?currentShowPageNo="+pageNo+"'>"+pageNo+"</a>&nbsp;";
				}
				
				loop++;
				pageNo++;
			}// end of while----------------------
			
			// *** [다음] 만들기 *** // 
			if( !(pageNo > totalPage) ) {
				pageBar += "&nbsp;<a href='"+url+"?currentShowPageNo="+pageNo+"'>[다음]</a>&nbsp;";
			}
			
			
			HashMap<String, Integer> sumMap = pdao.getSumCartPricePoint(userid);
			
			String goBackURL = MyUtil.getCurrentURL(request);
			// 특정 제품을 장바구니에서 비운후 페이지이동을 해야 하는데 이동할 페이지는 페이징 처리하여 보고 있던 그 페이지로 가도록 한다.
			
			request.setAttribute("cartList", cartList);
			request.setAttribute("sumMap", sumMap);
			request.setAttribute("pageBar", pageBar);
			request.setAttribute("goBackURL", goBackURL);
			
//			super.setRedirect(false);
			super.setViewPage("/WEB-INF/myshop/cartList.jsp");
		}
	}

}
